name: Deploy Frontend and Storybook
on:
  push:
    branches:
      - main

  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - prod

jobs:
  deploy-app:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    # only allow deployments from mentor or main branch
    if: github.actor == 'costjonah' || github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --omit=optional

      - name: Build application
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Deploy to S3 (Production)
        if: github.event.inputs.environment == 'prod'
        run: aws s3 sync --delete ./dist s3://${{ secrets.PROD_S3_BUCKET }}

      - name: Deploy to S3 (Staging)
        if: github.event.inputs.environment == 'staging' || github.event.inputs.environment == ''
        run: aws s3 sync --delete ./dist s3://${{ secrets.STAGING_S3_BUCKET }}

      - name: Invalidate CloudFront (Production)
        if: github.event.inputs.environment == 'prod'
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.PROD_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

      - name: Invalidate CloudFront (Staging)
        if: github.event.inputs.environment == 'staging' || github.event.inputs.environment == ''
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.STAGING_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

  deploy-storybook:
    runs-on: ubuntu-latest
    environment: staging
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --omit=optional

      - name: Build storybook
        run: npm run build-storybook

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Deploy Storybook to S3
        run: aws s3 sync --delete ./storybook-static s3://${{ secrets.STORYBOOK_S3_BUCKET }}

      - name: Invalidate Storybook CloudFront
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.STORYBOOK_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

  deploy-electron:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    # only allow deployments from mentor or main branch
    if: github.actor == 'costjonah' || github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --omit=optional

      - name: Build Electron app
        run: npm run electron:dist

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Deploy Electron installers to S3
        run: |
          # Create version directory structure
          VERSION=$(node -p "require('./package.json').version")
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          
          if [ "${{ github.event.inputs.environment }}" = "prod" ]; then
            # Upload to production versioned directory
            aws s3 sync ./release/ s3://${{ secrets.ELECTRON_DOWNLOADS_PROD_S3_BUCKET }}/v$VERSION-$TIMESTAMP/ --exclude "*.blockmap" --exclude "*.yaml"
            
            # Also upload to production 'latest' for direct download links
            aws s3 sync ./release/ s3://${{ secrets.ELECTRON_DOWNLOADS_PROD_S3_BUCKET }}/latest/ --exclude "*.blockmap" --exclude "*.yaml"
            
            # Upload release info to production
            echo "{\"version\":\"$VERSION\",\"timestamp\":\"$TIMESTAMP\",\"build\":\"$GITHUB_SHA\"}" > release-info.json
            aws s3 cp release-info.json s3://${{ secrets.ELECTRON_DOWNLOADS_PROD_S3_BUCKET }}/latest/release-info.json
          else
            # Upload to staging versioned directory
            aws s3 sync ./release/ s3://${{ secrets.ELECTRON_DOWNLOADS_STAGING_S3_BUCKET }}/v$VERSION-$TIMESTAMP/ --exclude "*.blockmap" --exclude "*.yaml"
            
            # Also upload to staging 'latest' for direct download links
            aws s3 sync ./release/ s3://${{ secrets.ELECTRON_DOWNLOADS_STAGING_S3_BUCKET }}/latest/ --exclude "*.blockmap" --exclude "*.yaml"
            
            # Upload release info to staging
            echo "{\"version\":\"$VERSION\",\"timestamp\":\"$TIMESTAMP\",\"build\":\"$GITHUB_SHA\"}" > release-info.json
            aws s3 cp release-info.json s3://${{ secrets.ELECTRON_DOWNLOADS_STAGING_S3_BUCKET }}/latest/release-info.json
          fi

      - name: Invalidate Electron Downloads CloudFront (Production)
        if: github.event.inputs.environment == 'prod'
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.ELECTRON_DOWNLOADS_PROD_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

      - name: Invalidate Electron Downloads CloudFront (Staging)
        if: github.event.inputs.environment == 'staging' || github.event.inputs.environment == ''
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.ELECTRON_DOWNLOADS_STAGING_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
